{"ast":null,"code":"import _classCallCheck from \"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kevinmiller/VBC/homework/playlist-generator/client/src/components/FetchBands.js\";\nimport React, { Component } from \"react\";\n\nvar cheerio = require(\"cheerio\");\n\nvar axios = require(\"axios\");\n\nvar FetchBands =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FetchBands, _Component);\n\n  function FetchBands(props) {\n    var _this;\n\n    _classCallCheck(this, FetchBands);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FetchBands).call(this, props));\n    _this.state = {\n      items: [],\n      isLoaded: false\n    };\n    return _this;\n  } // Making a request via axios for reddit's \"webdev\" board. We are sure to use old.reddit due to changes in HTML structure for the new reddit. The page's Response is passed as our promise argument.\n  //axios.get(\"https://www.bandsintown.com/?place_id=ChIJzWXFYYuifDUR64Pq5LTtioU&sort_by_filter=Number+of+RSVPs\").then(function(response) {\n\n\n  _createClass(FetchBands, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var BASEURL = \"https://www.bandsintown.com/?latitude=\";\n      var LAT = \"\";\n      var LON = \"\";\n      var SORT = \"&sort_by_filter=Number+of+RSVPs\";\n      var url = BASEURL + LAT + \"&\" + LON + SORT;\n      axios.get(url).then(function (response) {\n        // Load the Response into cheerio and save it to a variable\n        // '$' becomes a shorthand for cheerio's selector commands, much like jQuery's '$'\n        var $ = cheerio.load(response.data); // An empty array to  save the data that we'll scrape\n\n        var results = []; // With cheerio, find each p-tag with the \"title\" class\n        // (i: iterator. element: the current element)\n\n        $(\"div.upcomingEvents-075e0336\").each(function (i, element) {\n          // Save the text of the element in a \"title\" variable\n          //var title = $(element).text();\n          //let eventsNear = $(element).find(\"h1\").text();\n          $(element).find(\"h2.event-5daafce9\").each(function (i, element) {\n            var bandName = $(element).text(); // In the currently selected element, look at its child elements (i.e., its a-tags),\n            // then save the values for any \"href\" attributes that the child elements may have\n            // Save these results in an object that we'll push into the results array we defined earlier\n\n            results.push({\n              //title: title,\n              //City: eventsNear,\n              bandName: bandName\n            });\n          });\n        }); // Log the results once you've looped through each of the elements found with cheerio\n\n        console.log(results);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoaded = _this$state.isLoaded,\n          items = _this$state.items;\n\n      if (!isLoaded) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        return React.createElement(\"div\", {\n          className: \"fetchBands\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, {\n          title: title\n        })));\n      }\n\n      ;\n    }\n  }]);\n\n  return FetchBands;\n}(Component);\n\nexport default FetchBands;","map":{"version":3,"sources":["/Users/kevinmiller/VBC/homework/playlist-generator/client/src/components/FetchBands.js"],"names":["React","Component","cheerio","require","axios","FetchBands","props","state","items","isLoaded","BASEURL","LAT","LON","SORT","url","get","then","response","$","load","data","results","each","i","element","find","bandName","text","push","console","log","title"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;IAEME,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB,G,CAGL;AACA;;;;;wCAEoB;AAChB,UAAMC,OAAO,GAAG,wCAAhB;AACA,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,GAAG,GAAG,EAAV;AACA,UAAMC,IAAI,GAAG,iCAAb;AACA,UAAMC,GAAG,GAAGJ,OAAO,GAACC,GAAR,GAAY,GAAZ,GAAgBC,GAAhB,GAAoBC,IAAhC;AAEAT,MAAAA,KAAK,CAACW,GAAN,CAAUD,GAAV,EACME,IADN,CACW,UAASC,QAAT,EAAmB;AAIlC;AACA;AACA,YAAIC,CAAC,GAAGhB,OAAO,CAACiB,IAAR,CAAaF,QAAQ,CAACG,IAAtB,CAAR,CANkC,CAQlC;;AACA,YAAIC,OAAO,GAAG,EAAd,CATkC,CAWlC;AACA;;AACAH,QAAAA,CAAC,CAAC,6BAAD,CAAD,CAAiCI,IAAjC,CAAsC,UAASC,CAAT,EAAYC,OAAZ,EAAqB;AAE3D;AACA;AAEA;AAEAN,UAAAA,CAAC,CAACM,OAAD,CAAD,CAAWC,IAAX,CAAgB,mBAAhB,EAAqCH,IAArC,CAA0C,UAASC,CAAT,EAAYC,OAAZ,EAAqB;AAC/D,gBAAIE,QAAQ,GAAGR,CAAC,CAACM,OAAD,CAAD,CAAWG,IAAX,EAAf,CAD+D,CAI/D;AACA;AAEA;;AACAN,YAAAA,OAAO,CAACO,IAAR,CAAa;AACX;AACA;AACAF,cAAAA,QAAQ,EAAEA;AAHC,aAAb;AAKC,WAbD;AAcC,SArBD,EAbkC,CAoClC;;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACC,OAvCG;AAwCH;;;6BAGQ;AAAA,wBACqB,KAAKd,KAD1B;AAAA,UACCE,QADD,eACCA,QADD;AAAA,UACWD,KADX,eACWA,KADX;;AAEL,UAAI,CAACC,QAAL,EAAe;AACX,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH,OAFD,MAGK;AACD,eACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK;AAACsB,UAAAA,KAAK,EAALA;AAAD,SADL,CADR,CADJ,CADJ;AASH;;AAAA;AACJ;;;;EAhFwB9B,S;;AAmFzB,eAAeI,UAAf","sourcesContent":["import React, { Component } from \"react\";\nconst cheerio = require(\"cheerio\");\nconst axios = require(\"axios\");\n\nclass FetchBands extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            isLoaded: false,\n        }\n    }\n\n\n// Making a request via axios for reddit's \"webdev\" board. We are sure to use old.reddit due to changes in HTML structure for the new reddit. The page's Response is passed as our promise argument.\n//axios.get(\"https://www.bandsintown.com/?place_id=ChIJzWXFYYuifDUR64Pq5LTtioU&sort_by_filter=Number+of+RSVPs\").then(function(response) {\n\ncomponentDidMount() {\n    const BASEURL = \"https://www.bandsintown.com/?latitude=\";\n    let LAT = \"\";\n    let LON = \"\";\n    const SORT = \"&sort_by_filter=Number+of+RSVPs\";\n    const url = BASEURL+LAT+\"&\"+LON+SORT;\n\n    axios.get(url)\n         .then(function(response) {\n\n\n\n// Load the Response into cheerio and save it to a variable\n// '$' becomes a shorthand for cheerio's selector commands, much like jQuery's '$'\nvar $ = cheerio.load(response.data);\n\n// An empty array to  save the data that we'll scrape\nvar results = [];\n\n// With cheerio, find each p-tag with the \"title\" class\n// (i: iterator. element: the current element)\n$(\"div.upcomingEvents-075e0336\").each(function(i, element) {\n\n// Save the text of the element in a \"title\" variable\n//var title = $(element).text();\n\n//let eventsNear = $(element).find(\"h1\").text();\n\n$(element).find(\"h2.event-5daafce9\").each(function(i, element) {\nlet bandName = $(element).text()\n\n\n// In the currently selected element, look at its child elements (i.e., its a-tags),\n// then save the values for any \"href\" attributes that the child elements may have\n\n// Save these results in an object that we'll push into the results array we defined earlier\nresults.push({\n  //title: title,\n  //City: eventsNear,\n  bandName: bandName\n});\n});\n});\n\n// Log the results once you've looped through each of the elements found with cheerio\nconsole.log(results);\n});\n}\n\n\nrender() {\n    var { isLoaded, items } = this.state;\n    if (!isLoaded) {\n        return <div>Loading...</div>\n    }\n    else {\n        return (\n            <div className=\"fetchBands\">\n                <ul>\n                        <li>\n                            {{title}}\n                        </li>\n                </ul>\n            </div>\n        );\n    };\n}\n}\n\nexport default FetchBands;"]},"metadata":{},"sourceType":"module"}