{"ast":null,"code":"var _classCallCheck = require(\"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kevinmiller/VBC/homework/playlist-generator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar rp = require(\"request-promise\");\n\nvar TOKEN_URI = \"https://accounts.spotify.com/api/token\";\nvar SEARCH_URI = \"https://api.spotify.com/v1/search?type=\";\n\nvar Spotify =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Spotify(credentials) {\n    _classCallCheck(this, Spotify);\n\n    if (!credentials || !credentials.id || !credentials.secret) {\n      throw new Error('Could not initialize Spotify client. You must supply an object containing your Spotify client \"id\" and \"secret\".');\n    }\n\n    this.credentials = {\n      id: credentials.id,\n      secret: credentials.secret\n    };\n    this.token;\n  }\n\n  _createClass(Spotify, [{\n    key: \"search\",\n    value: function search(_search, cb) {\n      var _this = this;\n\n      var request;\n      var opts = {\n        method: \"GET\",\n        uri: SEARCH_URI + _search.type + \"&q=\" + encodeURIComponent(_search.query) + \"&limit=\" + (_search.limit || \"20\"),\n        json: true\n      };\n\n      if (!_search || !_search.type || !_search.query) {\n        throw new Error(\"You must specify a type and query for your search.\");\n      }\n\n      if (!this.token || !this.token.expires_in || !this.token.expires_at || !this.token.access_token || this.isTokenExpired()) {\n        request = this.setToken().then(function () {\n          opts.headers = _this.getTokenHeader();\n          return rp(opts);\n        });\n      } else {\n        opts.headers = this.getTokenHeader();\n        request = rp(opts);\n      }\n\n      if (cb) {\n        request.then(function (response) {\n          return cb(null, response);\n        }).catch(function (err) {\n          return cb(err, null);\n        });\n      } else {\n        return request;\n      }\n    }\n  }, {\n    key: \"request\",\n    value: function request(query, cb) {\n      var _this2 = this;\n\n      if (!query || typeof query !== \"string\") {\n        throw new Error(\"You must pass in a Spotify API endpoint to use this method.\");\n      }\n\n      var request;\n      var opts = {\n        method: \"GET\",\n        uri: query,\n        json: true\n      };\n\n      if (!this.token || !this.token.expires_in || !this.token.expires_at || !this.token.access_token || this.isTokenExpired()) {\n        request = this.setToken().then(function () {\n          opts.headers = _this2.getTokenHeader();\n          return rp(opts);\n        });\n      } else {\n        opts.headers = this.getTokenHeader();\n        request = rp(opts);\n      }\n\n      if (cb) {\n        request.then(function (response) {\n          return cb(null, response);\n        }).catch(function (err) {\n          return cb(err, null);\n        });\n      } else {\n        return request;\n      }\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired() {\n      if (this.token) {\n        if (Date.now() / 1000 >= this.token.expires_at - 300) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken() {\n      var _this3 = this;\n\n      var opts = {\n        method: \"POST\",\n        uri: TOKEN_URI,\n        form: {\n          grant_type: \"client_credentials\"\n        },\n        headers: this.getCredentialHeader(),\n        json: true\n      };\n      return rp(opts).then(function (token) {\n        _this3.token = token;\n        var currentTime = new Date();\n        var expireTime = new Date(+currentTime);\n        return _this3.token.expires_at = +expireTime / 1000 + _this3.token.expires_in;\n      });\n    }\n  }, {\n    key: \"getTokenHeader\",\n    value: function getTokenHeader() {\n      if (!this.token || !this.token.access_token) {\n        throw new Error(\"An error has occurred. Make sure you're using a valid client id and secret.'\");\n      }\n\n      return {\n        Authorization: \"Bearer \" + this.token.access_token\n      };\n    }\n  }, {\n    key: \"getCredentialHeader\",\n    value: function getCredentialHeader() {\n      return {\n        Authorization: \"Basic \" + Buffer.from(this.credentials.id + \":\" + this.credentials.secret, \"ascii\").toString(\"base64\")\n      };\n    }\n  }]);\n\n  return Spotify;\n}();\n\nmodule.exports = Spotify;","map":null,"metadata":{},"sourceType":"script"}