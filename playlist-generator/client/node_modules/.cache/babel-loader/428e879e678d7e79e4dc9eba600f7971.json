{"ast":null,"code":"function getBandData() {\n  var cheerio = require(\"cheerio\");\n\n  var axios = require(\"axios\");\n\n  var express = require(\"express\");\n\n  var logger = require(\"morgan\"); // Require all models\n\n\n  var db = require(\"./models\"); // Initialize Express\n\n\n  var app = express(); // Use morgan logger for logging requests\n\n  app.use(logger(\"dev\")); // Parse request body as JSON\n\n  app.use(express.urlencoded({\n    extended: true\n  }));\n  app.use(express.json()); // Make public a static folder\n\n  app.use(express.static(\"public\")); // First, tell the console what server.js is doing\n\n  console.log(\"\\n***********************************\\n\" + \"Grabbing Top 18 bands playing\\n\" + \"in 'this location':\" + \"\\n***********************************\\n\"); // Making a request via axios for reddit's \"webdev\" board. We are sure to use old.reddit due to changes in HTML structure for the new reddit. The page's Response is passed as our promise argument.\n  //axios.get(\"https://www.bandsintown.com/?place_id=ChIJzWXFYYuifDUR64Pq5LTtioU&sort_by_filter=Number+of+RSVPs\").then(function(response) {\n\n  var BASEURL = \"https://www.bandsintown.com/?latitude=\";\n  var LAT = \"36.16\";\n  var LON = \"-86.77\";\n  var SORT = \"&sort_by_filter=Number+of+RSVPs\";\n  var url = BASEURL + LAT + \"&\" + LON + SORT;\n  axios.get(url).then(function (response) {\n    // Load the Response into cheerio and save it to a variable\n    // '$' becomes a shorthand for cheerio's selector commands, much like jQuery's '$'\n    var $ = cheerio.load(response.data); // An empty array to  save the data that we'll scrape\n\n    var results = []; // With cheerio, find each p-tag with the \"title\" class\n    // (i: iterator. element: the current element)\n\n    $(\"div.upcomingEvents-075e0336\").each(function (i, element) {\n      // Save the text of the element in a \"title\" variable\n      //var title = $(element).text();\n      //let eventsNear = $(element).find(\"h1\").text();\n      $(element).find(\"h2.event-5daafce9\").each(function (i, element) {\n        var bandName = $(element).text(); // In the currently selected element, look at its child elements (i.e., its a-tags),\n        // then save the values for any \"href\" attributes that the child elements may have\n        // Save these results in an object that we'll push into the results array we defined earlier\n\n        results.push({\n          //title: title,\n          //City: eventsNear,\n          bandName: bandName\n        });\n      });\n      db.Bands.create(results).then(function (dbBands) {\n        console.log(dbBands);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    });\n    app.get(\"/bands\", function (req, res) {\n      db.Bands.find({}).then(function (dbandse) {\n        res.json(dbBands);\n      }).catch(function (err) {\n        res.json(err);\n      });\n    }); // Log the results once you've looped through each of the elements found with cheerio\n\n    console.log(results);\n  });\n}\n\ngetBandData();\nmodule.exports = getBandData;","map":{"version":3,"sources":["/Users/kevinmiller/VBC/homework/playlist-generator/client/src/components/scraper.js"],"names":["getBandData","cheerio","require","axios","express","logger","db","app","use","urlencoded","extended","json","static","console","log","BASEURL","LAT","LON","SORT","url","get","then","response","$","load","data","results","each","i","element","find","bandName","text","push","Bands","create","dbBands","catch","err","req","res","dbandse","module","exports"],"mappings":"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","sourcesContent":["function getBandData() {\n    var cheerio = require(\"cheerio\");\n    var axios = require(\"axios\");\n    var express = require(\"express\");\n    var logger = require(\"morgan\");\n\n    // Require all models\n    var db = require(\"./models\");\n    // Initialize Express\n    var app = express();\n    // Use morgan logger for logging requests\n    app.use(logger(\"dev\"));\n    // Parse request body as JSON\n    app.use(express.urlencoded({\n        extended: true\n    }));\n    app.use(express.json());\n    // Make public a static folder\n    app.use(express.static(\"public\"));\n\n    // First, tell the console what server.js is doing\n    console.log(\"\\n***********************************\\n\" +\n        \"Grabbing Top 18 bands playing\\n\" +\n        \"in 'this location':\" +\n        \"\\n***********************************\\n\");\n\n    // Making a request via axios for reddit's \"webdev\" board. We are sure to use old.reddit due to changes in HTML structure for the new reddit. The page's Response is passed as our promise argument.\n    //axios.get(\"https://www.bandsintown.com/?place_id=ChIJzWXFYYuifDUR64Pq5LTtioU&sort_by_filter=Number+of+RSVPs\").then(function(response) {\n    const BASEURL = \"https://www.bandsintown.com/?latitude=\";\n    let LAT = \"36.16\";\n    let LON = \"-86.77\";\n    const SORT = \"&sort_by_filter=Number+of+RSVPs\";\n    const url = BASEURL + LAT + \"&\" + LON + SORT;\n\n\n    axios.get(url)\n        .then(function (response) {\n\n\n\n            // Load the Response into cheerio and save it to a variable\n            // '$' becomes a shorthand for cheerio's selector commands, much like jQuery's '$'\n            var $ = cheerio.load(response.data);\n\n            // An empty array to  save the data that we'll scrape\n            var results = [];\n\n            // With cheerio, find each p-tag with the \"title\" class\n            // (i: iterator. element: the current element)\n            $(\"div.upcomingEvents-075e0336\").each(function (i, element) {\n\n                // Save the text of the element in a \"title\" variable\n                //var title = $(element).text();\n\n                //let eventsNear = $(element).find(\"h1\").text();\n\n                $(element).find(\"h2.event-5daafce9\").each(function (i, element) {\n                    let bandName = $(element).text()\n\n\n                    // In the currently selected element, look at its child elements (i.e., its a-tags),\n                    // then save the values for any \"href\" attributes that the child elements may have\n\n                    // Save these results in an object that we'll push into the results array we defined earlier\n                    results.push({\n                        //title: title,\n                        //City: eventsNear,\n                        bandName: bandName\n                    });\n                });\n                db.Bands.create(results)\n                    .then(function (dbBands) {\n                        console.log(dbBands);\n                    })\n                    .catch(function (err) {\n                        console.log(err);\n                    });\n            });\n\n            app.get(\"/bands\", function (req, res) {\n                db.Bands.find({})\n                    .then(function (dbandse) {\n                        res.json(dbBands);\n                    })\n                    .catch(function (err) {\n                        res.json(err);\n                    });\n            });\n\n            // Log the results once you've looped through each of the elements found with cheerio\n            console.log(results);\n        });\n}\n\n\n\ngetBandData()\n\nmodule.exports = getBandData"]},"metadata":{},"sourceType":"module"}